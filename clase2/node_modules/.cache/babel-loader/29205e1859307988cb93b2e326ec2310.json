{"ast":null,"code":"var _jsxFileName = \"/home/c910147/react/ejercicios/clase2/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction Countdown(props) {\n  return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Contador\"), React.createElement(\"input\", {\n    type: \"text\",\n    value: props.countdown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }));\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass InputExample extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentCount: this.props.defaultCount,\n      running: false\n    };\n  }\n\n  countdown() {\n    this.setState(prevState => ({\n      running: true\n    }));\n\n    if (!this.state.running) {\n      this.interval = setInterval(() => {\n        console.log(this.state.currentCount);\n\n        if (this.state.currentCount > 0) {\n          this.setState(prevState => ({\n            currentCount: parseInt(prevState.currentCount) - 1\n          }));\n        } else {\n          this.setState(prevState => ({\n            running: false\n          }));\n          clearInterval(this.interval);\n        }\n      }, 1000);\n      console.log(\"FINISH\");\n    }\n  }\n\n  reset() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.currentCount,\n      onChange: event => this.setState({\n        currentCount: parseInt(event.target.value)\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: event => this.setState({\n        currentCount: parseInt(this.state.currentCount) + 1\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"START\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: event => this.countdown(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"COUNTDOWN\"), React.createElement(\"button\", {\n      onClick: event => this.reset(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"RESET\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.currentCount));\n  }\n\n}\n\nfunction App() {\n  return React.createElement(InputExample, {\n    defaultCount: \"4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/home/c910147/react/ejercicios/clase2/src/App.js"],"names":["React","Countdown","props","countdown","sleep","ms","Promise","resolve","setTimeout","InputExample","Component","state","currentCount","defaultCount","running","setState","prevState","interval","setInterval","console","log","parseInt","clearInterval","reset","render","event","target","value","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAAyB;AAGvB,SAAO,0CACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADO,EAEP;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEA,KAAK,CAACC,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFO,CAAP;AAKD;;AAED,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACD;;AAED,MAAMI,YAAN,SAA2BT,KAAK,CAACU,SAAjC,CAA2C;AAAA;AAAA;AAAA,SACzCC,KADyC,GACjC;AACNC,MAAAA,YAAY,EAAE,KAAKV,KAAL,CAAWW,YADnB;AAENC,MAAAA,OAAO,EAAE;AAFH,KADiC;AAAA;;AASzCX,EAAAA,SAAS,GAAE;AACP,SAAKY,QAAL,CAAeC,SAAD,KACZ;AAAEF,MAAAA,OAAO,EAAE;AAAX,KADY,CAAd;;AAIE,QAAG,CAAC,KAAKH,KAAL,CAAWG,OAAf,EAAuB;AACrB,WAAKG,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAClCC,QAAAA,OAAO,CAACC,GAAR,CAAa,KAAKT,KAAL,CAAWC,YAAxB;;AACA,YAAG,KAAKD,KAAL,CAAWC,YAAX,GAA0B,CAA7B,EAA+B;AAC3B,eAAKG,QAAL,CAAeC,SAAD,KACZ;AAAEJ,YAAAA,YAAY,EAAES,QAAQ,CAACL,SAAS,CAACJ,YAAX,CAAR,GAAmC;AAAnD,WADY,CAAd;AAGC,SAJL,MAKI;AACF,eAAKG,QAAL,CAAeC,SAAD,KACZ;AAAEF,YAAAA,OAAO,EAAE;AAAX,WADY,CAAd;AAGAQ,UAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACD;AACA,OAb0B,EAaxB,IAbwB,CAA3B;AAcAE,MAAAA,OAAO,CAACC,GAAR,CAAa,QAAb;AACD;AACN;;AAEDG,EAAAA,KAAK,GAAE;AACLD,IAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACD;;AACDO,EAAAA,MAAM,GAAG;AACT,WAAQ,0CACR;AACA,MAAA,IAAI,EAAC,MADL;AAEA,MAAA,KAAK,EAAE,KAAKb,KAAL,CAAWC,YAFlB;AAGA,MAAA,QAAQ,EAAEa,KAAK,IAAI,KAAKV,QAAL,CAAc;AAAEH,QAAAA,YAAY,EAAES,QAAQ,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAxB,OAAd,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ,EAMR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANQ,EAOR;AAAQ,MAAA,OAAO,EAAEF,KAAK,IAAI,KAAKV,QAAL,CAAc;AAAEH,QAAAA,YAAY,EAAES,QAAQ,CAAC,KAAKV,KAAL,CAAWC,YAAZ,CAAR,GAAoC;AAApD,OAAd,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPQ,EAQR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARQ,EASR;AAAQ,MAAA,OAAO,EAAEa,KAAK,IAAI,KAAKtB,SAAL,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATQ,EAUR;AAAQ,MAAA,OAAO,EAAEsB,KAAK,IAAI,KAAKF,KAAL,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVQ,EAWR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXQ,EAYR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAS,KAAKZ,KAAL,CAAWC,YAApB,CAZQ,CAAR;AAeC;;AApDwC;;AAuD3C,SAASgB,GAAT,GAAe;AACb,SACE,oBAAC,YAAD;AAAc,IAAA,YAAY,EAAC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD;;AAED,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nfunction Countdown(props){\n  \n \n  return <>\n  <label>Contador</label>\n  <input type=\"text\" value={props.countdown}></input>\n  \n  </>;\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass InputExample extends React.Component {\n  state = {\n    currentCount: this.props.defaultCount,\n    running: false\n\n }\n\n interval;\n\n  countdown(){\n      this.setState((prevState ) => (\n        { running: true }\n        ));\n      \n        if(!this.state.running){\n          this.interval = setInterval(() => {\n          console.log (this.state.currentCount);\n          if(this.state.currentCount > 0){\n              this.setState((prevState ) => (\n                { currentCount: parseInt(prevState.currentCount) - 1 }\n                ));\n              }\n          else{\n            this.setState((prevState ) => (\n              { running: false }\n              ));    \n            clearInterval(this.interval);\n          }\n          }, 1000);\n          console.log (\"FINISH\");\n        }\n  }\n\n  reset(){\n    clearInterval(this.interval);\n  }\n  render() {\n  return (<>\n  <input\n  type=\"text\"\n  value={this.state.currentCount}\n  onChange={event => this.setState({ currentCount: parseInt(event.target.value) })}>\n  </input>\n  <br></br>\n  <button onClick={event => this.setState({ currentCount: parseInt(this.state.currentCount) + 1 })}>START</button>\n  <br></br>\n  <button onClick={event => this.countdown() }>COUNTDOWN</button>\n  <button onClick={event => this.reset() }>RESET</button>\n  <br></br>\n  <label >{this.state.currentCount}</label>\n  </>\n  );\n  }\n  }\n\nfunction App() {\n  return (\n    <InputExample defaultCount=\"4\"/>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}